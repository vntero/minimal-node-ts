// CAUTION duplicated test functions, newest tests can be found in src/usecases/containers/boardProfiels.spec.ts
import { clearCollections } from '../src/controllers/persistence/init'
import { Container, ContainerBoardPairingProfile, ContainerSensorsProfile } from '../src/models/container/schemas'
import { env } from '../src/config/env'
import { initSingleton } from '../src/frameworks/databasePgSingleton'
import { initHooks, initRelationships, sql } from '../src/controllers/persistence/makeModels'
import { createContainer, createContainerBoardPairingProfile, createContainerSensorsProfile, deleteContainerBoardPairingProfile, patchContainerBoardPairingProfile } from '../src/controllers/persistence/container'
import { Timeseries } from '../src/models/timeseries/schemas'
import { getSamplesFromTimeseriesWithBoardId } from '../src/controllers/persistence/timeseries'
import { getSamplesFromEventsWithBoardId } from '../src/controllers/persistence/events'

type ContainerSensorsProfileMod= Omit<ContainerSensorsProfile, 'sensorsProfileId'>
type ContainerBoardPairingProfileMod = Omit<ContainerBoardPairingProfile, 'boardPairingProfileId'|'createdAt'|'updatedAt'>

/* eslint-disable sonarjs/no-identical-functions */
/* eslint-disable sonarjs/no-duplicate-string */
/* eslint-disable import/first */
jest.mock('../src/usecases/devices/getBoardData', () => {
  // eslint-disable-next-line jest/no-mocks-import, @typescript-eslint/no-var-requires
  const { getBoardData, getBoardDataToTimeseriesWithBoardId } = require('../src/usecases/devices/__mocks__/getBoardData')
  return ({
    getBoardData: getBoardData,
    getBoardDataToTimeseriesWithBoardId: getBoardDataToTimeseriesWithBoardId,
  })
})

const minDate = new Date('2000-04-01T00:00:00.000Z')
const maxDate = new Date('2100-04-01T00:00:00.000Z')
const container1Date = new Date('2019-01-01T00:00:00.000Z')
const container2Date = new Date('2018-01-01T00:00:00.000Z')
const futureDate = new Date('3018-01-01T00:00:00.000Z')
const dateNow = new Date('2021-02-10T00:00:00.000Z')

const source = 'aeler'
const ts1Date = new Date('2020-01-01T00:00:00.000Z')
const ts2Date = new Date('2020-01-02T00:00:00.000Z')
const ts3Date = new Date('2020-01-03T00:00:00.000Z')
const ts4Date = new Date('2020-01-04T00:00:00.000Z')
const ts5Date = new Date('2020-01-05T00:00:00.000Z')
const ts6Date = new Date('2020-01-06T00:00:00.000Z')
const boardPairing1StartDate = new Date('2020-01-01T02:00:00.000Z') // is before ts2Date and after ts1Date
const boardPairing1EndDate = new Date('2020-01-03T01:00:00.000Z') // if before ts4Date and after ts3date
const boardPairing2StartDate = new Date('2020-01-02T01:00:00.000Z') // is before ts3Date and after ts2date
const boardPairing2EndDate = new Date('2020-01-05T01:00:00.000Z') // if before ts6Date and after ts5date
const boardPairing2UpdateNoOverlapStartDate = new Date('2019-12-30T00:00:00.000Z') //  before ts1Date
const boardPairing2UpdateNoOverlapEndDate = new Date('2020-01-01T01:00:00.000Z') // before ts2date, before boardPairing1startdate, after ts1date
const boardPairing2UpdateFullOverlapStartDate = new Date('2019-12-30T00:00:00.000Z') // before boardPairing1startdate, before ts1date
const boardPairing2UpdateFullOverlapEndDate = new Date('2020-01-04T01:00:00.000Z') // after boardPairing1enddate, after ts4
const boardPairing2UpdatePartialOverlapStartDate = new Date('2020-01-01T01:00:00.000Z') // before ts1date, before boardPairing1start date
const boardPairing2UpdatePartialOverlapEndDate = new Date('2020-01-02T01:00:00.000Z') // after boardPairing1startdate, before ts3, after ts2, before boardPairing1enddate
const boardPairing3StartDate = new Date('2020-01-02T02:00:00.000Z')

const boardPairing4StartDate = new Date('2021-01-02T01:00:00.000Z')
const boardPairing4EndDate = new Date('2021-01-02T01:00:00.000Z')
const containerId1 = 'containerId1'
const containerId2 = 'containerId2'
const aelerBoardId1 = 'aelerBoardId1'
const aelerBoardId2 = 'aelerBoardId2'
const nexxiotBoardId1 = 'nexxiotBoardId1'
const nexxiotBoardId2 = 'nexxiotBoardId2'
// board.getBoardData = jest.fn()

const boardPairing1: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId1,
  boardSource: 'aeler',
  installDate: new Date(boardPairing1StartDate),
  removalDate: new Date(boardPairing1EndDate),
  installComments: 'install',
  removalComments: 'removal',
  installTechnicianId: '123',
  removalTechnicianId: '234',
  installLocationId: '123123',
  removalLocationId: '123321',
  installLocationName: 'Antwerp',
  removalLocationName: 'Hamburg',
}
const boardPairing2: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId1,
  boardSource: 'aeler',
  installDate: new Date(boardPairing2StartDate),
  removalDate: new Date(boardPairing2EndDate),
  installComments: 'install',
  removalComments: 'removal',
  installTechnicianId: '123',
  removalTechnicianId: '234',
  installLocationId: '123123',
  removalLocationId: '123321',
  installLocationName: 'Paris',
  removalLocationName: 'London',
}
const boardPairing4: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId2,
  boardSource: 'aeler',
  installDate: new Date(boardPairing4StartDate),
  removalDate: new Date(boardPairing4EndDate),
  installComments: 'install',
  removalComments: 'removal',
  installTechnicianId: '123',
  removalTechnicianId: '234',
  installLocationId: '123123',
  removalLocationId: '123321',
  installLocationName: 'Paris',
  removalLocationName: 'London',
}

const boardPairing2UpdateNoOverlap: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId1,
  boardSource: 'aeler',
  installDate: new Date(boardPairing2UpdateNoOverlapStartDate),
  removalDate: new Date(boardPairing2UpdateNoOverlapEndDate),
  installComments: 'install',
  removalComments: 'removal',
  installTechnicianId: '123',
  removalTechnicianId: '234',
  installLocationId: '123123',
  removalLocationId: '123321',
  installLocationName: 'Amsterdam',
  removalLocationName: 'Tokyo',
}

const boardPairing2UpdateFullOverlap: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId1,
  boardSource: 'aeler',
  installDate: new Date(boardPairing2UpdateFullOverlapStartDate),
  removalDate: new Date(boardPairing2UpdateFullOverlapEndDate),
  installComments: 'install',
  removalComments: 'removal',
  installTechnicianId: '123',
  removalTechnicianId: '234',
  installLocationId: '123123',
  removalLocationId: '123321',
  installLocationName: 'Amsterdam',
  removalLocationName: 'Tokyo',
}

const boardPairing2UpdatePartialOverlap: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId1,
  boardSource: 'aeler',
  installDate: new Date(boardPairing2UpdatePartialOverlapStartDate),
  removalDate: new Date(boardPairing2UpdatePartialOverlapEndDate),
  installComments: 'install',
  removalComments: 'removal',
  installTechnicianId: '123',
  removalTechnicianId: '234',
  installLocationId: '123123',
  removalLocationId: '123321',
  installLocationName: 'Amsterdam',
  removalLocationName: 'Tokyo',
}

const boardPairing3NoRemoval: ContainerBoardPairingProfileMod = {
  containerId: containerId1,
  boardId: aelerBoardId1,
  boardSource: 'aeler',
  installDate: boardPairing3StartDate,
  installComments: 'install',
  installTechnicianId: '123',
  installLocationId: '123123',
  installLocationName: 'Antwerp',
}

const tsBase = {
  temperature_ext: 0,
  humidityInt: 0,
  humidityExt: 0,
  pressureInt: 0,
  pressureExt: 0,
  lightInt: 0,
  lightExt: 0,
  doorStatusRight: 0,
  doorStatusLeft: 0,
  iaq: 0,
  ngm3TVOC: 0,
  ppmeCO2: 0,
  ppbEtOH: 0,
  oaqNO2: 0,
  oaqO3: 0,
  probNO2: 0,
  ppbNO2: 0,
  ppb03: 0,
  hmsl: 0,
  hacc: 0,
  groundSpeed: 0,
  heading: 0,
}
const samples1 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts1Date,
  source: source,
  timestampInsert: ts1Date,
  temperature_int: 123123,
} as Timeseries
const ts1 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts1Date,
  source: source,
  timestampInsert: ts1Date,
  temperature_int: 1,
} as Timeseries
const ts2 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts2Date,
  source: source,
  timestampInsert: ts2Date,
  temperature_int: 2,
} as Timeseries
const ts3 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts3Date,
  source: source,
  timestampInsert: ts3Date,
  temperature_int: 3,
} as Timeseries
const ts4 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts4Date,
  source: source,
  timestampInsert: ts4Date,
  temperature_int: 4,
} as Timeseries
const ts5 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts5Date,
  source: source,
  timestampInsert: ts5Date,
  temperature_int: 5,
} as Timeseries
const ts6 = {
  ...tsBase,
  containerId: containerId1,
  timestamp: ts6Date,
  source: source,
  timestampInsert: ts6Date,
  temperature_int: 6,
} as Timeseries
const container1: Container = {
  containerId: containerId1,
  /** Characteristics */
  characteristics_size: '20ft',
  characteristics_type: 'REEFER',
  containerVersion: '1.0',
  characteristics_maxPayload: '2500kg',
  characteristics_builtYear: '2000',
  updatedAt: new Date(container1Date),
  createdAt: new Date(container1Date),
  volume: 199,
  characteristics_tare: 120,
}
const container2: Container = {
  containerId: containerId2,
  /** Characteristics */
  characteristics_size: '20ft',
  characteristics_type: 'REEFER',
  containerVersion: '1.0',
  characteristics_maxPayload: '2500kg',
  characteristics_builtYear: '2000',
  updatedAt: new Date(container2Date),
  createdAt: new Date(container2Date),
  volume: 199,
  characteristics_tare: 120,
}

const sensorsProfile1: ContainerSensorsProfileMod = {
  containerId: containerId1,
  createdAt: new Date(container1Date),
  aelerBoardId: aelerBoardId1,
  kizyBoardId: 'kizyboardId1',
  nexxiotBoardId: nexxiotBoardId1,
  source: 'aeler',
  dateFittedAeler: new Date(futureDate), // should not matter --> try with future date
  dateFittedKizy: new Date(futureDate), // should not matter --> try with future date
  dateFittedNexxiot: new Date(futureDate), // should not matter --> try with future date
}
const sensorsProfile2: ContainerSensorsProfileMod = {
  containerId: containerId2,
  createdAt: new Date(container2Date),
  aelerBoardId: aelerBoardId2,
  kizyBoardId: 'kizyboardId2',
  nexxiotBoardId: nexxiotBoardId2,
  source: 'aeler',
  dateFittedAeler: new Date(futureDate), // should not matter --> try with future date
  dateFittedKizy: new Date(futureDate), // should not matter --> try with future date
  dateFittedNexxiot: new Date(futureDate), // should not matter --> try with future date
}
jest.setTimeout(5000)

beforeAll(async () => {
  Date.now = jest.fn(() => new Date(dateNow).valueOf())
  const spy = jest
    .spyOn(global.Date, 'now')
    .mockImplementation(() => new Date(dateNow).valueOf()
    )

  const PGDB_URL = env.PGDB_URL
  console.log(PGDB_URL)
  // clearCollections()

  const sql = initSingleton(PGDB_URL)
  await sql.authenticate()

  console.log('start sync')
  await sql.sync({ force: true, logging: false })
  console.log('start init rel')
  initRelationships()
  console.log('start init hooks')
  initHooks()
  // console.log('start init hypertables')
  // await initHypertables(sql)

  await createContainer(container1)
  // createContainer(container2)
  await createContainerSensorsProfile(containerId1, sensorsProfile1)
})

afterAll(async () => {
  await clearCollections()
  await sql.close()
})
/// ///////////////////////////////////////////////////////////////

test('1. Create boardPairing,no end date', async () => {
  const res2 = await createContainerBoardPairingProfile(boardPairing3NoRemoval)
  res2.fold(
    () => {},
    (s) => {
      expect({ ...s, id: null }).toMatchObject({
        ...boardPairing3NoRemoval,
        boardPairingProfileId: s.boardPairingProfileId,
        createdAt: s.createdAt,
        updatedAt: s.updatedAt,
        removalComments: null,
        removalDate: null,
        removalLocationId: null,
        removalLocationName: null,
        removalTechnicianId: null,
        id: null,
        lastChangedByUserId: null,
        lastOperation: 'C',
      })
    }
  )
  // console.log(res2)
})

test('2. Create boardPairing, with end date', async () => {
  const res2 = await createContainerBoardPairingProfile(boardPairing1)
  res2.fold(
    () => {},
    (s) => {
      expect({ ...s, id: null }).toMatchObject({
        ...boardPairing1,
        boardPairingProfileId: s.boardPairingProfileId,
        createdAt: s.createdAt,
        updatedAt: s.updatedAt,
        id: null,
        lastChangedByUserId: null,
        lastOperation: 'C',
      })
    }
  )
  // console.log(res2)
})

test('3. Create boardPairing, with end date, and update', async () => {
  const res2 = await createContainerBoardPairingProfile(boardPairing2)
  const ids: string[] = []
  res2.fold(
    () => {},
    (s) => {
      ids.push(s.boardPairingProfileId)
    }
  )
  const res3 = await patchContainerBoardPairingProfile(ids[0], boardPairing2UpdateFullOverlap)
  // console.log(res3)
  res3.fold(
    () => {},
    (os) => {
      os.fold(
        () => {},
        (news) => {
          expect({ ...news, id: null }).toMatchObject({
            ...boardPairing2UpdateFullOverlap,
            boardPairingProfileId: news.boardPairingProfileId,
            createdAt: news.createdAt,
            updatedAt: news.updatedAt,
            id: null,
            lastChangedByUserId: null,
            lastOperation: 'U',
          })
          return undefined
        }
      )
    }
  )
})

test('4. Create boardPairing, with end date, and delete, checkts', async () => {
  const res2 = await createContainerBoardPairingProfile(boardPairing4)
  const ids: string[] = []
  res2.fold(
    () => {},
    (s) => {
      ids.push(s.boardPairingProfileId)
    }
  )
  const res3 = await deleteContainerBoardPairingProfile(ids[0])
  const dateEnd = boardPairing2.removalDate || new Date()
  const res4 = await getSamplesFromTimeseriesWithBoardId(boardPairing2.containerId, boardPairing2.boardId, 'aeler', boardPairing2.installDate, dateEnd)
  res4.fold(
    () => {},
    (s) => {
      expect(s).toEqual([])
    }
  )
})

test('5. checkts', async () => {
  const res4 = await getSamplesFromTimeseriesWithBoardId(boardPairing2.containerId, boardPairing1.boardId, 'aeler', minDate, maxDate)
  res4.fold(
    () => {},
    (s) => {
      expect(s.map(e => ({ ...e, createdAt: undefined, updatedAt: undefined }))).toMatchObject([{
        boardId: 'aelerBoardId1',
        containerId: 'containerId1',
        doorStatusLeft: 0,
        doorStatusRight: 0,
        groundSpeed: 0,
        hacc: 0,
        heading: 0,
        hmsl: 0,
        humidityExt: 0,
        humidityInt: 0,
        iaq: 0,
        lightExt: 0,
        lightInt: 0,
        ngm3TVOC: 0,
        oaqNO2: 0,
        oaqO3: 0,
        position: null,
        ppb03: 0,
        ppbEtOH: 0,
        ppbNO2: 0,
        ppmeCO2: 0,
        pressureExt: 0,
        pressureInt: 0,
        probNO2: 0,
        source: 'aeler',
        temperature_ext: 0,
        temperature_int: 112233,
        timestamp: new Date('2021-02-10T00:00:00.000Z'),
        timestampInsert: new Date('2021-02-10T00:00:00.000Z'),
      },
      ])
    }
  )
})

test('5. checkevents', async () => {
  const res4 = await getSamplesFromEventsWithBoardId(boardPairing2.containerId, boardPairing1.boardId, 'aeler', minDate, maxDate)
  res4.fold(
    () => {},
    (s) => {
      expect(s.map(e => ({
        ...e,
        createdAt: undefined,
        updatedAt: undefined,
        filter: undefined,
        eventId: undefined,
      }))).toMatchObject([{
        boardId: 'aelerBoardId1',
        containerId: 'containerId1',
        payloadId: null,
        comment: null,
        alertCode: 'DOO',
        source: 'aeler',
        timestamp: new Date('2021-02-10T00:00:00.000Z'),
        timestampInsert: new Date('2021-02-10T00:00:00.000Z'),
      },
      ])
    }
  )
})
